{
  "swagger": "2.0",
  "info": {
    "title": "Match Function",
    "version": "1.0",
    "contact": {
      "name": "Open Match",
      "url": "https://open-match.dev",
      "email": "open-match-discuss@googlegroups.com"
    },
    "license": {
      "name": "Apache 2.0 License",
      "url": "https://github.com/googleforgames/open-match/blob/master/LICENSE"
    }
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/matchfunction:run": {
      "post": {
        "summary": "DO NOT CALL THIS FUNCTION MANUALLY. USE backend.FetchMatches INSTEAD.\nRun pulls Tickets that satisify Profile constraints from QueryService, runs matchmaking logics against them, then\nconstructs and streams back match candidates to the Backend service.",
        "operationId": "Run",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/x-stream-definitions/openmatchRunResponse"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/openmatchRunRequest"
            }
          }
        ],
        "tags": [
          "MatchFunction"
        ]
      }
    }
  },
  "definitions": {
    "openmatchAssignment": {
      "type": "object",
      "properties": {
        "connection": {
          "type": "string",
          "description": "Connection information for this Assignment."
        },
        "extensions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "Customized information not inspected by Open Match, to be used by the match\nmaking function, evaluator, and components making calls to Open Match.\nOptional, depending on the requirements of the connected systems."
        }
      },
      "description": "An Assignment represents a game server assignment associated with a Ticket. Open\nmatch does not require or inspect any fields on assignment."
    },
    "openmatchDoubleRangeFilter": {
      "type": "object",
      "properties": {
        "double_arg": {
          "type": "string",
          "description": "Name of the ticket's search_fields.double_args this Filter operates on."
        },
        "max": {
          "type": "number",
          "format": "double",
          "description": "Maximum value."
        },
        "min": {
          "type": "number",
          "format": "double",
          "description": "Minimum value."
        }
      },
      "title": "Filters numerical values to only those within a range.\n  double_arg: \"foo\"\n  max: 10\n  min: 5\nmatches:\n  {\"foo\": 5}\n  {\"foo\": 7.5}\n  {\"foo\": 10}\ndoes not match:\n  {\"foo\": 4}\n  {\"foo\": 10.01}\n  {\"foo\": \"7.5\"}\n  {}"
    },
    "openmatchMatch": {
      "type": "object",
      "properties": {
        "match_id": {
          "type": "string",
          "description": "A Match ID that should be passed through the stack for tracing."
        },
        "match_profile": {
          "type": "string",
          "description": "Name of the match profile that generated this Match."
        },
        "match_function": {
          "type": "string",
          "description": "Name of the match function that generated this Match."
        },
        "tickets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/openmatchTicket"
          },
          "description": "Tickets belonging to this match."
        },
        "extensions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "Customized information not inspected by Open Match, to be used by the match\nmaking function, evaluator, and components making calls to Open Match.\nOptional, depending on the requirements of the connected systems."
        }
      },
      "description": "A Match is used to represent a completed match object. It can be generated by\na MatchFunction as a proposal or can be returned by OpenMatch as a result in\nresponse to the FetchMatches call.\nWhen a match is returned by the FetchMatches call, it should contain at least\none ticket to be considered as valid."
    },
    "openmatchMatchProfile": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of this match profile."
        },
        "pools": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/openmatchPool"
          },
          "description": "Set of pools to be queried when generating a match for this MatchProfile."
        },
        "extensions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "Customized information not inspected by Open Match, to be used by the match\nmaking function, evaluator, and components making calls to Open Match.\nOptional, depending on the requirements of the connected systems."
        }
      },
      "description": "A MatchProfile is Open Match's representation of a Match specification. It is\nused to indicate the criteria for selecting players for a match. A\nMatchProfile is the input to the API to get matches and is passed to the\nMatchFunction. It contains all the information required by the MatchFunction\nto generate match proposals."
    },
    "openmatchPool": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "A developer-chosen human-readable name for this Pool."
        },
        "double_range_filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/openmatchDoubleRangeFilter"
          },
          "description": "Set of Filters indicating the filtering criteria. Selected players must\nmatch every Filter."
        },
        "string_equals_filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/openmatchStringEqualsFilter"
          }
        },
        "tag_present_filters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/openmatchTagPresentFilter"
          }
        }
      }
    },
    "openmatchRunRequest": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/openmatchMatchProfile",
          "description": "A MatchProfile defines constraints of Tickets in a Match and shapes the Match proposed by the MatchFunction."
        }
      }
    },
    "openmatchRunResponse": {
      "type": "object",
      "properties": {
        "proposal": {
          "$ref": "#/definitions/openmatchMatch",
          "description": "A Proposal represents a Match candidate that satifies the constraints defined in the input Profile.\nA valid Proposal response will contain at least one ticket."
        }
      }
    },
    "openmatchSearchFields": {
      "type": "object",
      "properties": {
        "double_args": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          },
          "description": "Float arguments.  Filterable on ranges."
        },
        "string_args": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "String arguments.  Filterable on equality."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Filterable on presence or absence of given value."
        }
      },
      "description": "Search fields are the fields which Open Match is aware of, and can be used\nwhen specifying filters."
    },
    "openmatchStringEqualsFilter": {
      "type": "object",
      "properties": {
        "string_arg": {
          "type": "string",
          "description": "Name of the ticket's search_fields.string_args this Filter operates on."
        },
        "value": {
          "type": "string"
        }
      },
      "title": "Filters strings exactly equaling a value.\n  string_arg: \"foo\"\n  value: \"bar\"\nmatches:\n  {\"foo\": \"bar\"}\ndoes not match:\n  {\"foo\": \"baz\"}\n  {\"bar\": \"foo\"}\n  {}"
    },
    "openmatchTagPresentFilter": {
      "type": "object",
      "properties": {
        "tag": {
          "type": "string"
        }
      },
      "title": "Filters to the tag being present on the search_fields.\n  tag: \"foo\"\nmatches:\n  [\"foo\"]\n  [\"bar\",\"foo\"]\ndoes not match:\n  [\"bar\"]\n  []"
    },
    "openmatchTicket": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id represents an auto-generated Id issued by Open Match."
        },
        "assignment": {
          "$ref": "#/definitions/openmatchAssignment",
          "description": "An Assignment represents a game server assignment associated with a Ticket.\nOpen Match does not require or inspect any fields on Assignment."
        },
        "search_fields": {
          "$ref": "#/definitions/openmatchSearchFields",
          "description": "Search fields are the fields which Open Match is aware of, and can be used\nwhen specifying filters."
        },
        "extensions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/protobufAny"
          },
          "description": "Customized information not inspected by Open Match, to be used by the match\nmaking function, evaluator, and components making calls to Open Match.\nOptional, depending on the requirements of the connected systems."
        }
      },
      "description": "A Ticket is a basic matchmaking entity in Open Match. A Ticket represents either an\nindividual 'Player' or a 'Group' of players. Open Match will not interpret\nwhat the Ticket represents but just treat it as a matchmaking unit with a set\nof SearchFields. Open Match stores the Ticket in state storage and enables an\nAssignment to be associated with this Ticket."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "x-stream-definitions": {
    "openmatchRunResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/openmatchRunResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of openmatchRunResponse"
    }
  },
  "externalDocs": {
    "description": "Open Match Documentation",
    "url": "https://open-match.dev/site/docs/"
  }
}
